Changes with libwww 5.3.3

2001-08-30      Jose Kahan <jose@w3.org>

	* Added a new field in the HTRequest structure for specifying
	  a user defined Content-Location. This allows to use the library
	  functions to access a resource, while in fact the request sent
	  to the server is made to the value of the user defined 
	  Content-Location. This sound silly, but it allows to keep the
	  libwww state coherent and it doesn't break the requests like
	  the previous (and banned since long time) real content-location
	  handling. To avoid confusion, this field is called
	  default_put_name. See HTReqMan.h for the name of the functions
	  that handle this field.

        * New public function in HTCache.c to reset the value of a cache
	  entry and delete the cached file. This is interesting when 
	  we want to keep a cache entry, but force the cache entry to be
	  refreshed.  HTCache_resetMeta ().

2001-08-14	Jose Kahan <jose@w3.org>

	* HTProfile_newPreemptiveClient wasn't intializing the 
	  default event loop in all cases (bug reported by
	  Olivier Steinau).

2001-03-14	Jose Kahan <jose@w3.org>

	* Digest authentication didn't work well with pipelining requests.
	  Only one of such requests got the stale nonce. The other 401
	  were being re-interpreted as if the user had given a wrong
	  login name or password. To fix this, we try to infer a stale 
	  nonce if the previous nonce and the new one sent by the server
	  are different and a wrong login name/password if they are the
	  same. The patch is in HTAABrow.c. 
	  I also added a second bug fix in the same patch as not all 
	  pipelined requests seem to go thru the first authentication filter.
	
2001-03-09	Jose Kahan <jose@w3.org>

	* Digest authentication wasn't being compiled by default in Win32
	  because windows/config.h was missing the HT_MD5 define.
	
2001-03-06      Serge Adda <sAdda@infovista.com>
	
	* HTAnchor bug. HTAnchor_delete wasn't removing the reference to
	  the deleted anchor. This caused a bug whenever requesting another
	  anchor for the same URL. Thanks to Anton Belov for having
	  reported the problem and to Serge for his patch. See
	  http://lists.w3.org/Archives/Public/www-lib/2001JanMar/0133.html.
	  

2001-03-06      Stefan Wiesner <sw@ais-ag.de>

	* Timer bug. There was a bug in the code of function HTTimer_new
	  if a timer is already expired when HTTimer_new is called. See
	  http://lists.w3.org/Archives/Public/www-lib/2001JanMar/0123.html
	  for the full analysis.
	  
	
2001-02-26	Jose Kahan <jose@w3.org>

	* Cache bug. An HTResponse object was being freed repetively inside
	  a while loop, when reading a cached metadata in meta_read(). I 
	  moved the delete to outside this function.

Changes with libwww 5.3.2
	
2000-12-19	Jose Kahan <jose@w3.org>

	* Compilation fix: two prototypes in HTResponse.html were declared
	  as PUBLIC, instead of as external.
	  Updated the copyright date of the WinCommander
	  Fixed runtime crashes with the following example applications:
	      chunk.c chunkbody.c getheaders.c head.c multichunk.c

2000-12-18	Jose Kahan <jose@w3.org>

	* Compilation fix: The HTMIME_anchor2response() function
	  added a dependency between the cache and mime mini-libs.
	  I changed the call to a stream converter (HTCacheCopyHeaders)
	  to make it optional and to avoid the dependency. The converter
	  is initialized in HTInit.c:HTConverterInit.

2000-12-14	Jose Kahan <jose@w3.org>
	
	* Bug fix: make dist didn't work because of a recurrent rule
	  in the ComLine make file (it tried to use www to create a
	  documentation file).
 
2000-12-13	Jose Kahan <jose@w3.org>

	* Bug fix: When objects were retrieved from the cache, the
	  response object didn't have a copy of the request headers.
	  These headers were only found in the anchor associated to
	  the request. In order to make a coherent behavior, I made
	  a new function HTMIME.c:HTMIME_anchor2response() that copies
	  the headers from one object to the other. Well, more than a 
	  copy, it adds a link to the headers. I call this function in
	  HTCache:CacheCleanup when it succesfully retrieved an object
          from the cache. Result, you can now use the response object 
          in both cases.

2000-10-30	Jose Kahan <jose@w3.org>
	
	* Enhancement, added a new field to the HTResponse object to
	  store the HTTP reason sent by the server. Two new functions to 
  	  get it/set it: HTResponse_reason(), HTResponse_setReason()

2000-09-01 	Wayne Davison <wayne@clari.net>

	* HTAccess.c: Typo fix
	* HTChunk.c, HTChunk.html: new function, HTChunk_fromBuffer for
	  creating a chunk from an existing  block of memory, without having
	  to allocate more memory.

2000-09-01      Peter Stamfest <peter.stamfest@eunet.at>

	* Makefile.am: corrected a DESTDIR problem

2000-09-01      Jose Kahan <jose@w3.org>

	* config.h: Updated the libwww version

2000-09-01 	Zhu Qun-Ying <qunying@yahoo.com>

	* config.h: BUG FIX: wrong closing comment

2000-08-30 	Arthur Barstow <barstow@w3.org>

	* HTRDF.c: BUG FIX: nested typedNode constructs with
	  attributes caused re-using a free'd pointer.

	* HTRDF.c: per a request from the Redland RDF project, added 
	  a void * context parameter to HTRDF_parse{File,Buffer}.  
	  The application-specific context will be available in the 
	  triple callback handler.
	
        * HTRDF.html - updated to API changes mentioned above

	* Library/Examples/ updated rdf_parse_{file,buffer} programs
	  to reflect the above API changes.

2000-08-29 	Jose Kahan <jose@w3.org>

	* Temporarily commented the XML structured stream in HTXML.c
	  (HTXMLStructured_new) and its related code, as it creates
	  a dependency with the libwwwxml mini-library. If this code
	  is still useful, it should go into another module, HTSXML.c
	  to avoid the forced dependency.
	
2000-08-28 	Jose Kahan <jose@w3.org>

	* Updated expat to the test version 19990728, as this version
	  adds some interesting API extensions and is now being widely
	  used by other projects, including the Perl XML modules. The
	  previous version is CVS tagged as expat-1-1.
	
2000-08-18 	Arthur Barstow <barstow@w3.org>

	* HTRDF.c: Added a new public API HTRDF_parseBuffer.  It
          parses an arbitrary buffer (char *) of RDF.

	* HTRDF.c: Changed the name of HTRDFParseFile to HTRDF_parseFile.
          it now returns BOOL instead of char * to be consistent with
          other RDF parser APIs.

        * HTRDF.html - updated to HTRDF.c changes mentioned above

        * Library/Examples/: added two new example programs:

          1. rdf_parse_file - demos/tests HTRDF_parseFile()
          2. rdf_parse_buffer - demos/tests HTRDF_parseBuffer()

        * configure.in - added the two new programs above

        * Library/Examples/Makefile.am - added the two new programs

2000-08-17 	Arthur Barstow <barstow@w3.org>

	* HTRDF.c: Fixed a memory leak.  (HTElement structures for elements
	  within a property with parseType="Literal" were not free'd
	  after the parser was done.)

	* HTRDF.c: Bug fixes. Added code to circumvent calls to HTSAlloc 
	  (via StrAllocCopy) when the src and dest were identical (this 
	  causes a free'd pointer to be used) or both NULL.

	* HTRDF.c: Changed addMarkup{Add,End} to make one call to 
	  StrAllocMCat instead of multiple StrAllocCat calls.

2000-08-11 	Jose Kahan <jose@w3.org>

	* Memory leak. The HTPlain (HTPlain.c) stream wasn't freeing the
	  HTTextImp (me->text) object in the HTPlain_free and
	  HTPlain_abort. I found the bug while running the robot
	  thru Insure and found the fix by seeing what was being
	  done in the HTML (HTML.c) stream.

	* The make dist command wasn't copying the .c, .files, and .mak
	  files found in the Library/src/windows. As a result, the tar files
	  created with this command were missing those files. The problem
	  came from some wrong assumptions in the Makefile.am of the
	  windows directory.
	
2000-08-11 	Wayne Davison <wayne@clari.net>

	* Added two new functions to HTHash.c, HTHashtable_removeObject()
	  and HTHashTable_walk. The first one allows to delete individual
	  elements from a hash-table, the second one allows to walk
	  throug all associated elements in a table without having to ask 
	  for a list of all keys and then looking each one up. See
	  http://lists.w3.org/Archives/Public/www-lib/2000JulSep/0146.html
	  for a more detaile description on how to use these functions.
	  
	* I got rid of a few useless variable initializations in HTHash.c
	  (when the variables were being set to a value immediately
	  following the init value).

	* I removed some superfluous spaces that I saw.  

2000-08-10 	Wayne Davison <wayne@clari.net>

	* Since "cvs update" was complaining about a bunch of generated
	  files in the Library/src dir, I tweaked it to ignore the *.la
	  files and the .libs dir.

2000-08-10	Jose Kahan <jose@w3.org>

	* Because (IMO) of a very imbricated protocol stack, the Robot
	  could hang when accessing local files, as it become starved
	  on its own sockets. I fixed the problem by adding a new
	  state in HTFile:FileEvent() to take into account the case when
	  a request goes pending. This is mostly based on a previous 
	  (not commited) patch by Kinuko Yasuda, plus some long debugging to
	  find out what was happening and a fix to a memory bug that the
	  other patch had.

2000-08-08 	Wayne Davison <wayne@clari.net>
	
	* New HTChunk_setSize function to allow to set the size of a
	  chunk object upwards or downwards. (HTChunk_truncate() still
          exists and still enforces the sizing of the string downwards.)
          Both these string-sizing functions only zero the relevant bytes
          in the "size" region (if the string is being shortened).  Note
          that HTChunk_clear() was left unchanged -- it still clears all of
          the Chunk's allocated memory.
	
        * Fixed the HT_OUTOFMEM() calls in HTChunk_ensure() to have the
          proper location string.
	
        * Some code in HTBind.c was optimized to use HTChunk_truncate().
	
        * HTFTP.c and HTNews.c was optimized to use HTChunk_setSize()
	  rather than using HTChunk_ensure() and writing data past the "size".

        * Optimized the code in HTMIME.c and HTML.c to use
	  HTChunk_truncate(chunk,0) rather than HTChunk_clear(chunk).

	* Documented the new HTChunk_setSize() function.

	* Improved the comments for HTChunk_clear().

	* Fixed the comments for HTChunk_ensure() (it was describing the
	  extra-size parameter incorrectly).

	* Fixed the comments for HTChunk_toString() (to indicate that the
	  function destroys the chunk when handing off the CString data).

	* Fixed a few spelling errors in HTChunk.html.

	* Note: There are probably other places in the code that could be
	  optimized to use truncate rather than clear, but I didn't have 
	  time to check each one to see if the chunk's data was properly 
	  respecting the size indicator or not.

2000-08-09	Jose Kahan <jose@w3.org>

	* Updated the "how to bootstrap section" with instructions on what to
	  do if libtool and aclocal are installed in different directories.
	  Thanks to Ken Olum and James Henstrige for the tips.

2000-08-08	Jens Meggers <jens@meggers.com>

	* The cache garbage collector (HTCacheGarbage()) could go into an
	  endless loop when it tried to removed locked entries. The problem
	  was that it wasn't checking the return code of HTCache_remove().

2000-08-07 	Wayne Davison <wayne@clari.net>

	* Changed the macro argument from "data" to "dp" in 
	  HTArray_firstObject() and HTArray_nextObject(). These macros
	  are defined such that if the caller doesn't pass in a variable
	  named exactly "data" as the second parameter, there will either be a
	  syntax error generated during the compilation OR the wrong structure 
	  element will get referenced.  This is because the macro argument 
	  "data" was the same name as the HTArray structure element that was
	  being referenced in the macro.

Changes with previous versions

	* No info available (this log was started with version 5.3.2)
